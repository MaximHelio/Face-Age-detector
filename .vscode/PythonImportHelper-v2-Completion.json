[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "tkinter.scrolledtext",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.scrolledtext",
        "description": "tkinter.scrolledtext",
        "detail": "tkinter.scrolledtext",
        "documentation": {}
    },
    {
        "label": "selectFile",
        "kind": 2,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "def selectFile():\n    file_name = filedialog.askopenfilename(\n        # jpg 파일만 select\n        initialdir=\"./image\", title=\"Select file\", filetypes=((\"jpeg files\", \"*.jpg\"), (\"all files\", \"*.*\")))\n    read_image = cv2.imread(file_name)\n    # bgr을 rgb로 변환\n    image = cv2.cvtColor(read_image, cv2.COLOR_BGR2RGB)\n    # RGB형식의 이미지를 PIL(Python Imaging Library) 객체로 변환\n    image = Image.fromarray(image)\n    # PIL의 Image 객체를 Tkinter에서 사용할 수 있는 형식인 PhotoImage객체로 변환",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "def detect(image):\n    # image.shape(높이, 너비, 채널)\n    (h, w) = image.shape[:2]\n    # 모델이 이미지 처리할 수 있는 형식으로 변환함 scale = 1.0 : 이미지의 크기 비율 지정, size, 윤곽의 color이미지가 필요한 것이므로\n    # swapRB: RBG로 바꿀 거냐 뭐냐, crop: 이미지 자를 거니?/여기선 전체 이미지 다 사용\n    # 이 그림에서 얼굴만 찾아줌\n    imageBlob = cv2. dnn.blobFromImage(\n        cv2.resize(image, OUTPUT_SIZE), 1.0, OUTPUT_SIZE, (104.0, 177.0, 123.0), swapRB=False, crop=False)\n    detector.setInput(imageBlob)\n    detections = detector.forward()",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "face_model",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "face_model = './model/res10_300x300_ssd_iter_140000.caffemodel'\nface_prototxt = './model/deploy.prototxt.txt'\nage_model = './model/age_net.caffemodel'\nage_prototxt = './model/age_deploy.prototxt'\ngender_model = './model/gender_net.caffemodel'\ngender_prototxt = './model/gender_deploy.prototxt'\nimage_file = './image/female1.jpg'\nage_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "face_prototxt",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "face_prototxt = './model/deploy.prototxt.txt'\nage_model = './model/age_net.caffemodel'\nage_prototxt = './model/age_deploy.prototxt'\ngender_model = './model/gender_net.caffemodel'\ngender_prototxt = './model/gender_deploy.prototxt'\nimage_file = './image/female1.jpg'\nage_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "age_model",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "age_model = './model/age_net.caffemodel'\nage_prototxt = './model/age_deploy.prototxt'\ngender_model = './model/gender_net.caffemodel'\ngender_prototxt = './model/gender_deploy.prototxt'\nimage_file = './image/female1.jpg'\nage_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'\n# 50%이상의 정확도",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "age_prototxt",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "age_prototxt = './model/age_deploy.prototxt'\ngender_model = './model/gender_net.caffemodel'\ngender_prototxt = './model/gender_deploy.prototxt'\nimage_file = './image/female1.jpg'\nage_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'\n# 50%이상의 정확도\nmin_confidence = 0.5",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "gender_model",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "gender_model = './model/gender_net.caffemodel'\ngender_prototxt = './model/gender_deploy.prototxt'\nimage_file = './image/female1.jpg'\nage_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'\n# 50%이상의 정확도\nmin_confidence = 0.5\nmin_likeness = 0.5",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "gender_prototxt",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "gender_prototxt = './model/gender_deploy.prototxt'\nimage_file = './image/female1.jpg'\nage_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'\n# 50%이상의 정확도\nmin_confidence = 0.5\nmin_likeness = 0.5\nOUTPUT_SIZE = (300, 300)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "image_file",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "image_file = './image/female1.jpg'\nage_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'\n# 50%이상의 정확도\nmin_confidence = 0.5\nmin_likeness = 0.5\nOUTPUT_SIZE = (300, 300)\n# 3개의 detector 객체 생성",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "age_list",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "age_list = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',\n            '(25-32)', '(38-43)', '(48-53)', '(60-100)']\ngender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'\n# 50%이상의 정확도\nmin_confidence = 0.5\nmin_likeness = 0.5\nOUTPUT_SIZE = (300, 300)\n# 3개의 detector 객체 생성\ndetector = cv2.dnn.readNetFromCaffe(face_prototxt, face_model)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "gender_list",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "gender_list = ['Male', 'Female']\ntitle_name = 'Age and Gender Recognition'\n# 50%이상의 정확도\nmin_confidence = 0.5\nmin_likeness = 0.5\nOUTPUT_SIZE = (300, 300)\n# 3개의 detector 객체 생성\ndetector = cv2.dnn.readNetFromCaffe(face_prototxt, face_model)\nage_detector = cv2.dnn.readNetFromCaffe(age_prototxt, age_model)\ngender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "title_name",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "title_name = 'Age and Gender Recognition'\n# 50%이상의 정확도\nmin_confidence = 0.5\nmin_likeness = 0.5\nOUTPUT_SIZE = (300, 300)\n# 3개의 detector 객체 생성\ndetector = cv2.dnn.readNetFromCaffe(face_prototxt, face_model)\nage_detector = cv2.dnn.readNetFromCaffe(age_prototxt, age_model)\ngender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)\ndef selectFile():",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "min_confidence",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "min_confidence = 0.5\nmin_likeness = 0.5\nOUTPUT_SIZE = (300, 300)\n# 3개의 detector 객체 생성\ndetector = cv2.dnn.readNetFromCaffe(face_prototxt, face_model)\nage_detector = cv2.dnn.readNetFromCaffe(age_prototxt, age_model)\ngender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)\ndef selectFile():\n    file_name = filedialog.askopenfilename(\n        # jpg 파일만 select",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "min_likeness",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "min_likeness = 0.5\nOUTPUT_SIZE = (300, 300)\n# 3개의 detector 객체 생성\ndetector = cv2.dnn.readNetFromCaffe(face_prototxt, face_model)\nage_detector = cv2.dnn.readNetFromCaffe(age_prototxt, age_model)\ngender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)\ndef selectFile():\n    file_name = filedialog.askopenfilename(\n        # jpg 파일만 select\n        initialdir=\"./image\", title=\"Select file\", filetypes=((\"jpeg files\", \"*.jpg\"), (\"all files\", \"*.*\")))",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "OUTPUT_SIZE",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "OUTPUT_SIZE = (300, 300)\n# 3개의 detector 객체 생성\ndetector = cv2.dnn.readNetFromCaffe(face_prototxt, face_model)\nage_detector = cv2.dnn.readNetFromCaffe(age_prototxt, age_model)\ngender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)\ndef selectFile():\n    file_name = filedialog.askopenfilename(\n        # jpg 파일만 select\n        initialdir=\"./image\", title=\"Select file\", filetypes=((\"jpeg files\", \"*.jpg\"), (\"all files\", \"*.*\")))\n    read_image = cv2.imread(file_name)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "detector",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "detector = cv2.dnn.readNetFromCaffe(face_prototxt, face_model)\nage_detector = cv2.dnn.readNetFromCaffe(age_prototxt, age_model)\ngender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)\ndef selectFile():\n    file_name = filedialog.askopenfilename(\n        # jpg 파일만 select\n        initialdir=\"./image\", title=\"Select file\", filetypes=((\"jpeg files\", \"*.jpg\"), (\"all files\", \"*.*\")))\n    read_image = cv2.imread(file_name)\n    # bgr을 rgb로 변환\n    image = cv2.cvtColor(read_image, cv2.COLOR_BGR2RGB)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "age_detector",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "age_detector = cv2.dnn.readNetFromCaffe(age_prototxt, age_model)\ngender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)\ndef selectFile():\n    file_name = filedialog.askopenfilename(\n        # jpg 파일만 select\n        initialdir=\"./image\", title=\"Select file\", filetypes=((\"jpeg files\", \"*.jpg\"), (\"all files\", \"*.*\")))\n    read_image = cv2.imread(file_name)\n    # bgr을 rgb로 변환\n    image = cv2.cvtColor(read_image, cv2.COLOR_BGR2RGB)\n    # RGB형식의 이미지를 PIL(Python Imaging Library) 객체로 변환",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "gender_detector",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "gender_detector = cv2.dnn.readNetFromCaffe(gender_prototxt, gender_model)\ndef selectFile():\n    file_name = filedialog.askopenfilename(\n        # jpg 파일만 select\n        initialdir=\"./image\", title=\"Select file\", filetypes=((\"jpeg files\", \"*.jpg\"), (\"all files\", \"*.*\")))\n    read_image = cv2.imread(file_name)\n    # bgr을 rgb로 변환\n    image = cv2.cvtColor(read_image, cv2.COLOR_BGR2RGB)\n    # RGB형식의 이미지를 PIL(Python Imaging Library) 객체로 변환\n    image = Image.fromarray(image)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "main = Tk()\n# GUI창의 제목 설정\nmain.title(title_name)\n# 화면 구성\nmain.geometry()\n# load the input image and convert it from BGR to RGB\nread_image = cv2.imread(image_file)\n(height, width) = read_image.shape[:2]\n# openCV는 bgr format(색맹 검사지 느낌)이므로 -> rgb포맷으로 바꾸어줌\nimage = cv2.cvtColor(read_image, cv2.COLOR_BGR2RGB, )",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "read_image",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "read_image = cv2.imread(image_file)\n(height, width) = read_image.shape[:2]\n# openCV는 bgr format(색맹 검사지 느낌)이므로 -> rgb포맷으로 바꾸어줌\nimage = cv2.cvtColor(read_image, cv2.COLOR_BGR2RGB, )\n# 화면에 보여줌\nimage = Image.fromarray(image)\nimgtk = ImageTk.PhotoImage(image=image)\nlabel = Label(main, text=title_name)\nlabel.config(font=(\"Courier\", 18))\nlabel.grid(row=0, column=0, columnspan=4)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "image = cv2.cvtColor(read_image, cv2.COLOR_BGR2RGB, )\n# 화면에 보여줌\nimage = Image.fromarray(image)\nimgtk = ImageTk.PhotoImage(image=image)\nlabel = Label(main, text=title_name)\nlabel.config(font=(\"Courier\", 18))\nlabel.grid(row=0, column=0, columnspan=4)\nfileLabel = Label(main, text=image_file)\nfileLabel.grid(row=1, column=0, columnspan=2)\nButton(main, text=\"File Select\", height=2, command=lambda: selectFile()).grid(",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "image = Image.fromarray(image)\nimgtk = ImageTk.PhotoImage(image=image)\nlabel = Label(main, text=title_name)\nlabel.config(font=(\"Courier\", 18))\nlabel.grid(row=0, column=0, columnspan=4)\nfileLabel = Label(main, text=image_file)\nfileLabel.grid(row=1, column=0, columnspan=2)\nButton(main, text=\"File Select\", height=2, command=lambda: selectFile()).grid(\n    row=1, column=2, columnspan=2, sticky=(N, S, W, E))\ndetection = Label(main, image=imgtk)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "imgtk",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "imgtk = ImageTk.PhotoImage(image=image)\nlabel = Label(main, text=title_name)\nlabel.config(font=(\"Courier\", 18))\nlabel.grid(row=0, column=0, columnspan=4)\nfileLabel = Label(main, text=image_file)\nfileLabel.grid(row=1, column=0, columnspan=2)\nButton(main, text=\"File Select\", height=2, command=lambda: selectFile()).grid(\n    row=1, column=2, columnspan=2, sticky=(N, S, W, E))\ndetection = Label(main, image=imgtk)\ndetection.grid(row=2, column=0, columnspan=4)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "label = Label(main, text=title_name)\nlabel.config(font=(\"Courier\", 18))\nlabel.grid(row=0, column=0, columnspan=4)\nfileLabel = Label(main, text=image_file)\nfileLabel.grid(row=1, column=0, columnspan=2)\nButton(main, text=\"File Select\", height=2, command=lambda: selectFile()).grid(\n    row=1, column=2, columnspan=2, sticky=(N, S, W, E))\ndetection = Label(main, image=imgtk)\ndetection.grid(row=2, column=0, columnspan=4)\nlog_ScrolledText = tkst.ScrolledText(main, height=20)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "fileLabel",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "fileLabel = Label(main, text=image_file)\nfileLabel.grid(row=1, column=0, columnspan=2)\nButton(main, text=\"File Select\", height=2, command=lambda: selectFile()).grid(\n    row=1, column=2, columnspan=2, sticky=(N, S, W, E))\ndetection = Label(main, image=imgtk)\ndetection.grid(row=2, column=0, columnspan=4)\nlog_ScrolledText = tkst.ScrolledText(main, height=20)\nlog_ScrolledText.grid(row=3, column=0, columnspan=4, sticky=(N, S, W, E))\nlog_ScrolledText.configure(font='TkFixedFont')\nlog_ScrolledText.tag_config(",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "detection",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "detection = Label(main, image=imgtk)\ndetection.grid(row=2, column=0, columnspan=4)\nlog_ScrolledText = tkst.ScrolledText(main, height=20)\nlog_ScrolledText.grid(row=3, column=0, columnspan=4, sticky=(N, S, W, E))\nlog_ScrolledText.configure(font='TkFixedFont')\nlog_ScrolledText.tag_config(\n    'HEADER', foreground='gray', font=(\"Helvetica\", 14))\nlog_ScrolledText.tag_config('TITLE', foreground='orange', font=(\n    \"Helvetica\", 18), underline=1, justify='center')\ndetect(read_image)",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    },
    {
        "label": "log_ScrolledText",
        "kind": 5,
        "importPath": "face_age_gender_recognition_GUI",
        "description": "face_age_gender_recognition_GUI",
        "peekOfCode": "log_ScrolledText = tkst.ScrolledText(main, height=20)\nlog_ScrolledText.grid(row=3, column=0, columnspan=4, sticky=(N, S, W, E))\nlog_ScrolledText.configure(font='TkFixedFont')\nlog_ScrolledText.tag_config(\n    'HEADER', foreground='gray', font=(\"Helvetica\", 14))\nlog_ScrolledText.tag_config('TITLE', foreground='orange', font=(\n    \"Helvetica\", 18), underline=1, justify='center')\ndetect(read_image)\n# TKinter의 이벤트 루프를 시작. 사용자가 윈도우를 조작할 때 발생하는 이벤트에 대한 응답을 처리\nmain.mainloop()",
        "detail": "face_age_gender_recognition_GUI",
        "documentation": {}
    }
]